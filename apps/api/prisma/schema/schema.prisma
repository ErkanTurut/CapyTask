generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["postgresqlExtensions", "prismaSchemaFolder"]
}

datasource db {
    provider   = "postgresql"
    url        = env("DATABASE_URL")
    directUrl  = env("DIRECT_URL")
    extensions = [pgcrypto, postgis(schema: "extensions"), uuid_ossp(map: "uuid-ossp", schema: "extensions")]
}

model address {
    id          String                   @id @default(dbgenerated("nanoid(10)"))
    public_id   String                   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    street      String
    city        String
    state       String
    country     String
    createdDate DateTime                 @default(now())
    postal_code String
    geography   Unsupported("geography")
    location    location[]
}

model asset {
    id              String            @id @default(dbgenerated("nanoid(17)"))
    public_id       String            @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name            String
    description     String?
    created_at      DateTime          @default(now()) @db.Timestamptz(6)
    updated_at      DateTime          @default(now()) @db.Timestamptz(6)
    workspace_id    String
    location_id     String?
    location        location?         @relation(fields: [location_id], references: [id])
    workspace       workspace         @relation(fields: [workspace_id], references: [id], onDelete: Cascade)
    work_order_item work_order_item[]
    work_step       work_step[]

    @@index([location_id])
    @@index([workspace_id])
}

model assigned_resource {
    id                     String              @id @default(dbgenerated("nanoid(10)"))
    created_at             DateTime            @default(now()) @db.Timestamptz(6)
    updated_at             DateTime            @default(now()) @db.Timestamptz(6)
    service_resource_id    String
    service_appointment_id String
    service_appointment    service_appointment @relation(fields: [service_appointment_id], references: [id], onDelete: Cascade)
    service_resource       service_resource    @relation(fields: [service_resource_id], references: [id])

    @@unique([service_appointment_id, service_resource_id])
    @@index([service_appointment_id])
    @@index([service_resource_id])
}

model company {
    id           String         @id @default(dbgenerated("nanoid(10)"))
    public_id    String         @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name         String
    description  String?
    created_at   DateTime       @default(now()) @db.Timestamptz(6)
    updated_at   DateTime       @default(now()) @db.Timestamptz(6)
    workspace_id String
    workspace    workspace      @relation(fields: [workspace_id], references: [id], onDelete: Cascade)
    company_user company_user[]
    location     location[]
    work_order   work_order[]

    @@index([workspace_id])
}

model company_user {
    company_id String
    user_id    String  @db.Uuid
    company    company @relation(fields: [company_id], references: [id])
    user       user    @relation(fields: [user_id], references: [id])

    @@id([company_id, user_id])
    @@index([company_id])
    @@index([user_id])
}

model location {
    id                 String            @id @default(dbgenerated("nanoid(10)"))
    public_id          String            @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    location_type      LocationType      @default(BUILDING)
    location_level     Int               @default(1)
    name               String
    description        String?
    created_at         DateTime          @default(now()) @db.Timestamptz(6)
    updated_at         DateTime          @default(now()) @db.Timestamptz(6)
    parent_location_id String?
    workspace_id       String
    address_id         String
    company_id         String?
    asset              asset[]
    address            address           @relation(fields: [address_id], references: [id])
    company            company?          @relation(fields: [company_id], references: [id])
    location           location?         @relation("locationTolocation", fields: [parent_location_id], references: [id], onDelete: Cascade)
    other_location     location[]        @relation("locationTolocation")
    workspace          workspace         @relation(fields: [workspace_id], references: [id])
    work_order         work_order[]
    work_order_item    work_order_item[]

    @@index([address_id])
    @@index([company_id])
    @@index([parent_location_id])
    @@index([workspace_id])
}

model note {
    id             String                 @id @default(dbgenerated("nanoid(17)"))
    entity_type    String
    entity_id      String
    content        String
    embedding      Unsupported("vector")?
    metadata       Json?
    created_at     DateTime               @default(now()) @db.Timestamptz(6)
    updated_at     DateTime               @default(now()) @db.Timestamptz(6)
    created_by     String                 @db.Uuid
    user           user?                  @relation(fields: [created_by], references: [id])
    parent_note_id String?

    parent_note note?  @relation("noteTOnote", fields: [parent_note_id], references: [id], onDelete: Cascade)
    note        note[] @relation("noteTOnote")

    @@index([created_by])
    @@index([entity_id])
    @@index([entity_type])
}

model role_permission {
    id         String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    role       role
    permission Permission

    @@unique([role, permission])
}

model service_appointment {
    id                 String              @id @default(dbgenerated("nanoid(10)"))
    work_order_id      String?
    created_at         DateTime            @default(now()) @db.Timestamptz(6)
    updated_at         DateTime            @default(now()) @db.Timestamptz(6)
    end_date           DateTime            @db.Timestamptz(6)
    start_date         DateTime            @db.Timestamptz(6)
    work_order_item_id String?
    assigned_resource  assigned_resource[]
    work_order         work_order?         @relation(fields: [work_order_id], references: [id])
    work_order_item    work_order_item?    @relation(fields: [work_order_item_id], references: [id])

    @@index([end_date])
    @@index([start_date])
    @@index([work_order_id])
    @@index([work_order_item_id])
}

model service_resource {
    id                       String                     @id @default(dbgenerated("nanoid(10)"))
    user_id                  String                     @db.Uuid
    is_active                Boolean                    @default(true)
    created_at               DateTime                   @default(now()) @db.Timestamptz(6)
    updated_at               DateTime                   @default(now()) @db.Timestamptz(6)
    team_id                  String
    first_name               String
    last_name                String
    full_name                Unsupported("tsvector")?   @default(dbgenerated("to_tsvector('simple'::regconfig, ((COALESCE(first_name, ''::text) || ' '::text) || COALESCE(last_name, ''::text)))"))
    assigned_resource        assigned_resource[]
    team                     team                       @relation(fields: [team_id], references: [id])
    user                     user                       @relation(fields: [user_id], references: [id])
    service_resource_absence service_resource_absence[]
    service_resource_skill   service_resource_skill[]

    @@index([team_id])
    @@index([user_id])
}

model service_resource_absence {
    id                  String           @id @default(dbgenerated("nanoid(10)"))
    service_resource_id String
    start_date          DateTime
    end_date            DateTime
    created_at          DateTime         @default(now()) @db.Timestamptz(6)
    updated_at          DateTime         @default(now()) @db.Timestamptz(6)
    service_resource    service_resource @relation(fields: [service_resource_id], references: [id])

    @@index([end_date])
    @@index([service_resource_id])
    @@index([start_date])
}

model service_resource_skill {
    id                  String           @id @default(dbgenerated("nanoid(10)"))
    service_resource_id String
    skill_id            String
    created_at          DateTime         @default(now()) @db.Timestamptz(6)
    updated_at          DateTime         @default(now()) @db.Timestamptz(6)
    service_resource    service_resource @relation(fields: [service_resource_id], references: [id])
    skill               skill            @relation(fields: [skill_id], references: [id])

    @@index([service_resource_id])
    @@index([skill_id])
}

model shift {
    id         String   @id @default(dbgenerated("nanoid(10)"))
    team_id    String
    days       Int[]
    start_time DateTime @db.Time(6)
    end_time   DateTime @db.Time(6)
    team       team     @relation(fields: [team_id], references: [id])
}

model skill {
    id                     String                   @id @default(dbgenerated("nanoid(10)"))
    name                   String
    description            String?
    created_at             DateTime                 @default(now()) @db.Timestamptz(6)
    updated_at             DateTime                 @default(now()) @db.Timestamptz(6)
    service_resource_skill service_resource_skill[]

    @@index([name])
}

model team {
    id               String             @id @default(dbgenerated("nanoid(10)"))
    name             String
    description      String?
    image_uri        String?
    created_at       DateTime           @default(now()) @db.Timestamptz(6)
    updated_at       DateTime           @default(now()) @db.Timestamptz(6)
    workspace_id     String
    identity         String
    public_id        String             @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    service_resource service_resource[]
    shift            shift[]
    workspace        workspace          @relation(fields: [workspace_id], references: [id], onDelete: Cascade)
    team_user        team_user[]
    work_order       work_order[]
    work_plan        work_plan[]

    @@unique([identity, workspace_id])
    @@unique([name, workspace_id])
    @@index([workspace_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model team_user {
    user_id String @db.Uuid
    team_id String
    role    role
    team    team   @relation(fields: [team_id], references: [id], onDelete: Cascade)
    user    user   @relation(fields: [user_id], references: [id])

    @@id([user_id, team_id])
    @@index([team_id])
    @@index([user_id])
}

model user {
    id               String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    image_uri        String?
    email            String                   @unique
    first_name       String?
    last_name        String?
    createdAt        DateTime                 @default(now()) @db.Timestamptz(6)
    updatedAt        DateTime                 @default(now()) @db.Timestamptz(6)
    external_id      String?                  @unique @db.Uuid
    full_name        Unsupported("tsvector")? @default(dbgenerated("to_tsvector('simple'::regconfig, ((COALESCE(first_name, ''::text) || ' '::text) || COALESCE(last_name, ''::text)))"))
    company_user     company_user[]
    note             note[]
    service_resource service_resource[]
    team_user        team_user[]
    work_order       work_order[]
    workspace        workspace[]
    workspace_user   workspace_user[]

    @@index([full_name], type: Gin)
}

model work_order {
    id                  String                @id @default(dbgenerated("nanoid(10)"))
    public_id           String                @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name                String
    description         String?
    created_at          DateTime              @default(now()) @db.Timestamptz(6)
    updated_at          DateTime              @default(now()) @db.Timestamptz(6)
    status              Status                @default(OPEN)
    team_id             String
    work_plan_id        String?
    location_id         String?
    company_id          String
    priority            Priority              @default(LOW)
    sheduled_end        DateTime?             @db.Timestamptz(6)
    sheduled_start      DateTime?             @db.Timestamptz(6)
    type                WorkOrderType         @default(INSPECTION)
    source              WorkOrderSource?
    requested_by_id     String?               @db.Uuid
    workspace_id        String
    ended_at            DateTime?             @db.Timestamptz(6)
    started_at          DateTime?             @db.Timestamptz(6)
    service_appointment service_appointment[]
    company             company               @relation(fields: [company_id], references: [id])
    location            location?             @relation(fields: [location_id], references: [id])
    user                user?                 @relation(fields: [requested_by_id], references: [id])
    team                team                  @relation(fields: [team_id], references: [id])
    work_plan           work_plan?            @relation(fields: [work_plan_id], references: [id])
    workspace           workspace             @relation(fields: [workspace_id], references: [id])
    work_order_item     work_order_item[]
    work_step           work_step[]
    work_order_history  work_order_history[]

    @@index([company_id])
    @@index([location_id])
    @@index([team_id])
    @@index([work_plan_id])
    @@index([workspace_id])
}

model work_order_history {
    id            Int        @id @default(autoincrement())
    work_order_id String
    work_order    work_order @relation(fields: [work_order_id], references: [id])
    created_at    DateTime   @default(now()) @db.Timestamptz(6)
    field         String
    new_value     String
    old_value     String

    @@index([work_order_id])
}

model work_order_item {
    id                  String                @id @default(dbgenerated("nanoid(10)"))
    work_order_id       String
    asset_id            String?
    location_id         String?
    created_at          DateTime              @default(now()) @db.Timestamptz(6)
    updated_at          DateTime              @default(now()) @db.Timestamptz(6)
    status              Status                @default(OPEN)
    description         String?
    name                String
    service_appointment service_appointment[]
    asset               asset?                @relation(fields: [asset_id], references: [id])
    location            location?             @relation(fields: [location_id], references: [id])
    work_order          work_order            @relation(fields: [work_order_id], references: [id], onDelete: Cascade)

    @@index([asset_id])
    @@index([location_id])
    @@index([work_order_id])
}

model work_plan {
    id                    String              @id @default(dbgenerated("nanoid(10)"))
    public_id             String              @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name                  String
    description           String?
    created_at            DateTime            @default(now()) @db.Timestamptz(6)
    updated_at            DateTime            @default(now()) @db.Timestamptz(6)
    work_plan_template_id String?
    team_id               String
    work_order            work_order[]
    team                  team                @relation(fields: [team_id], references: [id], onDelete: Cascade)
    work_plan_template    work_plan_template? @relation(fields: [work_plan_template_id], references: [id])
    work_step             work_step[]

    @@unique([work_plan_template_id, created_at])
    @@index([team_id])
    @@index([work_plan_template_id])
}

model work_plan_template {
    id                 String               @id @default(dbgenerated("nanoid(10)"))
    public_id          String               @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name               String
    description        String?
    created_at         DateTime             @default(now()) @db.Timestamptz(6)
    updated_at         DateTime             @default(now()) @db.Timestamptz(6)
    workspace_id       String
    work_plan          work_plan[]
    workspace          workspace            @relation(fields: [workspace_id], references: [id], onDelete: Cascade)
    work_step_template work_step_template[]

    @@index([workspace_id])
}

model work_step {
    id                    String              @id @default(dbgenerated("nanoid(17)"))
    public_id             String              @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name                  String
    description           String?
    created_at            DateTime            @default(now()) @db.Timestamptz(6)
    updated_at            DateTime            @default(now()) @db.Timestamptz(6)
    parent_step_id        String?
    created_by_id         String?             @db.Uuid
    step_order            Int?
    work_plan_id          String
    work_step_template_id String?
    work_order_id         String?
    asset_id              String?
    status                Status              @default(OPEN)
    asset                 asset?              @relation(fields: [asset_id], references: [id])
    work_step             work_step?          @relation("work_stepTowork_step", fields: [parent_step_id], references: [id], onDelete: Cascade)
    other_work_step       work_step[]         @relation("work_stepTowork_step")
    work_order            work_order?         @relation(fields: [work_order_id], references: [id])
    work_plan             work_plan           @relation(fields: [work_plan_id], references: [id], onDelete: Cascade)
    work_step_template    work_step_template? @relation(fields: [work_step_template_id], references: [id])

    @@index([asset_id])
    @@index([created_by_id])
    @@index([parent_step_id])
    @@index([work_order_id])
    @@index([work_plan_id])
    @@index([work_step_template_id])
}

model work_step_template {
    id                       String               @id @default(dbgenerated("nanoid(17)"))
    public_id                String               @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name                     String
    description              String?
    created_at               DateTime             @default(now()) @db.Timestamptz(6)
    updated_at               DateTime             @default(now()) @db.Timestamptz(6)
    parent_step_id           String?
    created_by_id            String?              @db.Uuid
    step_order               Int?
    work_plan_template_id    String
    work_step                work_step[]
    work_step_template       work_step_template?  @relation("work_step_templateTowork_step_template", fields: [parent_step_id], references: [id], onDelete: Cascade)
    other_work_step_template work_step_template[] @relation("work_step_templateTowork_step_template")
    work_plan_template       work_plan_template   @relation(fields: [work_plan_template_id], references: [id], onDelete: Cascade)

    @@index([created_by_id])
    @@index([parent_step_id])
    @@index([work_plan_template_id])
}

model workspace {
    id                 String               @id @default(dbgenerated("nanoid(10)"))
    name               String
    description        String?
    created_at         DateTime             @default(now()) @db.Timestamptz(6)
    updated_at         DateTime             @default(now()) @db.Timestamptz(6)
    url_key            String               @unique
    created_by         String               @db.Uuid
    image_uri          String?
    public_id          String               @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    asset              asset[]
    company            company[]
    location           location[]
    team               team[]
    work_order         work_order[]
    work_plan_template work_plan_template[]
    user               user                 @relation(fields: [created_by], references: [id])
    workspace_user     workspace_user[]

    @@index([url_key])
}

model workspace_user {
    user_id      String    @db.Uuid
    workspace_id String
    role         role
    user         user      @relation(fields: [user_id], references: [id])
    workspace    workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

    @@id([user_id, workspace_id])
    @@index([user_id])
    @@index([workspace_id])
}

enum LocationType {
    BUILDING
    FLOOR
    ROOM
    AREA
    OTHER
}

enum Permission {
    CREATE
    READ
    UPDATE
    DELETE
}

enum Priority {
    LOW
    MEDIUM
    HIGH
}

enum Status {
    OPEN
    IN_PROGRESS
    COMPLETED
    ON_HOLD
    CANCELED
}

enum WorkOrderSource {
    MAINTENANCE_PLAN
    AI_CHAT
    AI_VOICE_ASSISTANT
    MANUAL_ENTRY
    OTHER
}

enum WorkOrderType {
    INSPECTION
    MAINTENANCE
    OTHER
}

enum role {
    ADMIN
    MANAGER
    SUPERVISOR
    TECHNICIAN
    ENGINEER
    QUALITY_INSPECTOR
    OPERATOR
    OTHER
}
