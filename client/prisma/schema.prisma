///Setup Prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

///Schema 

model User {
  id              String             @id @default(cuid())
  externalId      String             @unique
  attributes      Json
  tasks           Task[]
  userOrgRoles    UserOrganization[]
  userFolderRoles UserFolder[]
}

model Organization {
  id         String @id @default(cuid())
  externalId String @unique
  name       String

  folders Folder[]
  users   UserOrganization[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id              String             @id @default(uuid())
  name            String             @unique
  description     String
  permissions     String             @default([])
  userOrgRoles    UserOrganization[]
  userFolderRoles UserFolder[]
}

// Task Folder, each folder belongs to an organization, and can have multiple tasks 
model Folder {
  id          String  @id @default(cuid())
  name        String
  description String?
  tasks       Task[]

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  UserFolderRole UserFolder[]

  @@index([organizationId])
}

// Task into Folder and SubTasks, each task belongs to a folder and can have subtasks and a parent task (if it is a subtask)
model Task {
  id          String  @id @default(cuid())
  name        String
  description String?
  status      Status

  folderId     String
  folder       Folder  @relation(fields: [folderId], references: [id])
  parentTaskId String?
  parentTask   Task?   @relation("TaskSubTasks", fields: [parentTaskId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subTasks     Task[]  @relation("TaskSubTasks")

  createdById String?
  createdBy   User?   @relation(fields: [createdById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([folderId])
  @@index([parentTaskId])
  @@index([createdById])
}

// User Organization link, each user can be part of multiple organizations, with different roles for each organization but only one role per organization
model UserOrganization {
  userId       String
  orgId        String
  roleId       String
  user         User         @relation(fields: [userId], references: [id])
  organization Organization @relation(fields: [orgId], references: [id])
  role         Role         @relation(fields: [roleId], references: [id])

  @@id([userId, orgId, roleId])
  @@index([orgId])
  @@index([roleId])
  @@index([userId])
}

// User Folder link, each user can be part of multiple folders, with different roles for each folder but only one role per folder
model UserFolder {
  userId   String
  folderId String
  roleId   String
  user     User   @relation(fields: [userId], references: [id])
  folder   Folder @relation(fields: [folderId], references: [id])
  role     Role   @relation(fields: [roleId], references: [id])

  @@id([userId, folderId, roleId])
  @@index([userId])
  @@index([folderId])
  @@index([roleId])
}

enum Status {
  NOTSTARTED
  INPROGRESS
  COMPLETED_SUCCESS
  COMPLETED_FAIL
}
