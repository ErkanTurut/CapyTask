generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
  extensions = [pgcrypto, postgis(schema: "extensions"), uuid_ossp(map: "uuid-ossp", schema: "extensions")]
}

generator zod {
  provider = "zod-prisma"
  output   = "./zod" // (default) the directory where generated zod schemas will be saved

  relationModel = true // (default) Create and export both plain and related models.

  modelCase = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)

  modelSuffix = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas

  useDecimalJs = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

  prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
}

model user {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  image_uri      String?
  email          String           @unique
  first_name     String?
  last_name      String?
  createdAt      DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime         @default(now()) @updatedAt @db.Timestamptz(6)
  external_id    String?          @unique @db.Uuid
  user_team      user_team[]
  user_workspace user_workspace[]
  workspaces     workspace[]
  company_user   company_user[]
}

model team {
  id                 String               @id @default(dbgenerated("nanoid(10)"))
  name               String
  description        String?
  image_uri          String?
  created_at         DateTime             @default(now()) @db.Timestamptz(6)
  updated_at         DateTime             @default(now()) @updatedAt @db.Timestamptz(6)
  workspace_id       String
  identity           String
  public_id          String               @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workspace          workspace            @relation(fields: [workspace_id], references: [id], onDelete: Cascade)
  users              user_team[]
  work_order         work_order[]
  work_plan          work_plan[]
  work_plan_template work_plan_template[]

  @@unique([identity, workspace_id])
  @@unique([name, workspace_id])
  @@index([workspace_id])
}

model workspace {
  id             String           @id @default(dbgenerated("nanoid(10)"))
  name           String
  description    String?
  created_at     DateTime         @default(now()) @db.Timestamptz(6)
  updated_at     DateTime         @default(now()) @updatedAt @db.Timestamptz(6)
  url_key        String           @unique
  created_by     String           @db.Uuid
  image_uri      String?
  public_id      String           @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  asset          asset[]
  team           team[]
  user_workspace user_workspace[]
  user           user             @relation(fields: [created_by], references: [id])
  location       location[]

  @@index([url_key])
}

model user_team {
  user_id String  @db.Uuid
  team_id String
  role_id String? @db.Uuid
  role    role?   @relation(fields: [role_id], references: [id])
  team    team    @relation(fields: [team_id], references: [id], onDelete: Cascade)
  user    user    @relation(fields: [user_id], references: [id])

  @@id([user_id, team_id])
  @@index([team_id])
  @@index([role_id])
  @@index([user_id])
}

model user_workspace {
  user_id      String    @db.Uuid
  workspace_id String
  role_id      String?   @db.Uuid
  role         role?     @relation(fields: [role_id], references: [id])
  user         user      @relation(fields: [user_id], references: [id])
  workspace    workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  @@id([user_id, workspace_id])
  @@index([user_id])
  @@index([workspace_id])
  @@index([role_id])
}

model role {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           Role
  description    String
  permissions    Permission[]     @default([])
  user_team      user_team[]
  user_workspace user_workspace[]
}

model work_plan_template {
  id                 String               @id @default(dbgenerated("nanoid(10)"))
  public_id          String               @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name               String
  description        String?
  created_at         DateTime             @default(now()) @db.Timestamptz(6)
  updated_at         DateTime             @default(now()) @updatedAt @db.Timestamptz(6)
  team_id            String
  work_plan          work_plan[]
  team               team                 @relation(fields: [team_id], references: [id], onDelete: Cascade)
  work_step_template work_step_template[]

  @@index([team_id])
}

model work_step_template {
  id                    String               @id @default(dbgenerated("nanoid(17)"))
  public_id             String               @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                  String
  description           String?
  created_at            DateTime             @default(now()) @db.Timestamptz(6)
  updated_at            DateTime             @default(now()) @updatedAt @db.Timestamptz(6)
  parent_step_id        String?
  created_by_id         String?              @db.Uuid
  step_order            Int?
  work_plan_template_id String
  parent_step           work_step_template?  @relation("step_sub_steps", fields: [parent_step_id], references: [id], onDelete: Cascade)
  sub_steps             work_step_template[] @relation("step_sub_steps")
  work_plan_template    work_plan_template   @relation(fields: [work_plan_template_id], references: [id], onDelete: Cascade)

  @@index([parent_step_id])
  @@index([created_by_id])
  @@index([work_plan_template_id])
}

model work_plan {
  id                    String              @id @default(dbgenerated("nanoid(10)"))
  public_id             String              @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                  String
  description           String?
  created_at            DateTime            @default(now()) @db.Timestamptz(6)
  updated_at            DateTime            @default(now()) @updatedAt @db.Timestamptz(6)
  work_plan_template_id String?
  team_id               String
  work_order            work_order[]
  team                  team                @relation(fields: [team_id], references: [id], onDelete: Cascade)
  work_plan_template    work_plan_template? @relation(fields: [work_plan_template_id], references: [id])
  work_step             work_step[]

  @@unique([work_plan_template_id, created_at])
  @@index([work_plan_template_id])
}

model work_step {
  id               String             @id @default(dbgenerated("nanoid(17)"))
  public_id        String             @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String
  description      String?
  created_at       DateTime           @default(now()) @db.Timestamptz(6)
  updated_at       DateTime           @default(now()) @updatedAt @db.Timestamptz(6)
  parent_step_id   String?
  created_by_id    String?            @db.Uuid
  step_order       Int?
  work_plan_id     String
  parent_step      work_step?         @relation("step_sub_steps", fields: [parent_step_id], references: [id], onDelete: Cascade)
  sub_steps        work_step[]        @relation("step_sub_steps")
  work_plan        work_plan          @relation(fields: [work_plan_id], references: [id], onDelete: Cascade)
  work_step_status work_step_status[]

  @@index([parent_step_id])
  @@index([created_by_id])
  @@index([work_plan_id])
}

model work_order {
  id          String  @id @default(dbgenerated("nanoid(10)"))
  public_id   String  @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  description String?

  location_id String?
  location    location? @relation(fields: [location_id], references: [id])

  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  status Status @default(OPEN)

  team_id      String
  work_plan_id String?

  customer_id String?
  customer    company? @relation(fields: [customer_id], references: [id])

  team      team       @relation(fields: [team_id], references: [id], onDelete: Cascade)
  work_plan work_plan? @relation(fields: [work_plan_id], references: [id])

  work_order_asset work_order_asset[]
  work_step_status work_step_status[]

  @@index([team_id])
}

model work_step_status {
  id            String     @id @default(dbgenerated("nanoid(17)"))
  public_id     String     @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  status        Status     @default(OPEN)
  created_at    DateTime   @default(now()) @db.Timestamptz(6)
  updated_at    DateTime   @default(now()) @updatedAt @db.Timestamptz(6)
  work_order_id String
  work_step_id  String
  step_order    Int?
  work_order    work_order @relation(fields: [work_order_id], references: [id], onDelete: Cascade)
  work_step     work_step  @relation(fields: [work_step_id], references: [id])

  @@index([work_order_id])
}

model work_order_asset {
  work_order_id String
  asset_id      String
  asset         asset      @relation(fields: [asset_id], references: [id])
  work_order    work_order @relation(fields: [work_order_id], references: [id], onDelete: Cascade)

  @@id([work_order_id, asset_id])
  @@index([asset_id])
  @@index([work_order_id])
}

model asset {
  id               String             @id @default(dbgenerated("nanoid(17)"))
  public_id        String             @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String
  description      String?
  created_at       DateTime           @default(now()) @db.Timestamptz(6)
  updated_at       DateTime           @default(now()) @updatedAt @db.Timestamptz(6)
  workspace_id     String
  workspace        workspace          @relation(fields: [workspace_id], references: [id], onDelete: Cascade)
  work_order_asset work_order_asset[]
  asset_location   asset_location[]
}

model asset_location {
  asset_id    String
  location_id String
  asset       asset    @relation(fields: [asset_id], references: [id])
  location    location @relation(fields: [location_id], references: [id])

  @@id([asset_id, location_id])
  @@index([location_id])
  @@index([asset_id])
}

model location {
  id             String       @id @default(dbgenerated("nanoid(10)"))
  public_id      String       @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  location_type  LocationType @default(BUILDING)
  location_level Int          @default(1)

  name        String
  description String?
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  parent_location_id String?
  parent_location    location?  @relation("location_sub_locations", fields: [parent_location_id], references: [id], onDelete: Cascade)
  sub_locations      location[] @relation("location_sub_locations")

  workspace_id String
  workspace    workspace @relation(fields: [workspace_id], references: [id])

  address_id String
  address    address @relation(fields: [address_id], references: [id])

  company_id String?
  company    company? @relation(fields: [company_id], references: [id])

  work_order     work_order[]
  asset_location asset_location[]

  @@index([parent_location_id])
  @@index([workspace_id])
  @@index([address_id])
}

model company {
  id           String         @id @default(dbgenerated("nanoid(10)"))
  public_id    String         @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String
  description  String?
  created_at   DateTime       @default(now()) @db.Timestamptz(6)
  updated_at   DateTime       @default(now()) @updatedAt @db.Timestamptz(6)
  location     location[]
  company_user company_user[]
  work_order   work_order[]
}

model company_user {
  company_id String
  user_id    String  @db.Uuid
  company    company @relation(fields: [company_id], references: [id])
  user       user    @relation(fields: [user_id], references: [id])

  @@id([company_id, user_id])
  @@index([company_id])
  @@index([user_id])
}

model address {
  id          String                   @id @default(dbgenerated("nanoid(10)"))
  public_id   String                   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  street      String
  city        String
  state       String
  country     String
  postal_code String
  geography   Unsupported("geography")
  createdDate DateTime                 @default(now())
  location    location[]
}

enum LocationType {
  BUILDING
  FLOOR
  ROOM
  AREA
  OTHER
}

enum Status {
  OPEN
  IN_PROGRESS
  COMPLETED
  ON_HOLD
  CANCELED
}

enum Role {
  ADMIN
  MANAGER
  SUPERVISOR
  TECHNICIAN
  ENGINEER
  QUALITY_INSPECTOR
  OPERATOR
  OTHER
}

enum Permission {
  FULL_ACCESS
  CAN_EDIT
  CAN_COMMENT
  CAN_VIEW
  NO_ACCESS
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum inspectionType {
  INSPECTION
  MAINTENANCE
  OTHER
}
