generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
  extensions = [pgcrypto]
}

model user {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  image_uri   String?
  email       String   @unique
  first_name  String?
  last_name   String?
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  external_id String?  @unique @db.Uuid

  user_team      user_team[]
  user_workspace user_workspace[]
  workspaces     workspace[]
}

model team {
  id        String @id @default(dbgenerated("nanoid(10)"))
  public_id String @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  identity  String

  name        String
  description String?
  image_uri   String?
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  workspace_id String
  workspace    workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  work_plan_template work_plan_template[]
  users              user_team[]
  work_order         work_order[]
  work_plan          work_plan[]

  @@unique([identity, workspace_id])
  @@unique([name, workspace_id])
  @@unique([public_id])
  @@index([workspace_id])
}

model workspace {
  id             String           @id @default(dbgenerated("nanoid(10)"))
  public_id      String           @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String
  description    String?
  created_at     DateTime         @default(now()) @db.Timestamptz(6)
  updated_at     DateTime         @default(now()) @updatedAt @db.Timestamptz(6)
  url_key        String           @unique
  created_by     String           @db.Uuid
  image_uri      String?
  team           team[]
  user_workspace user_workspace[]
  user           user             @relation(fields: [created_by], references: [id])

  @@unique([public_id])
  @@index([url_key])
}

model user_team {
  user_id String  @db.Uuid
  team_id String
  role_id String? @db.Uuid
  role    role?   @relation(fields: [role_id], references: [id])
  team    team    @relation(fields: [team_id], references: [id], onDelete: Cascade)
  user    user    @relation(fields: [user_id], references: [id])

  @@id([user_id, team_id])
  @@index([team_id])
  @@index([role_id])
  @@index([user_id])
}

model user_workspace {
  user_id      String    @db.Uuid
  workspace_id String
  role_id      String?   @db.Uuid
  role         role?     @relation(fields: [role_id], references: [id])
  user         user      @relation(fields: [user_id], references: [id])
  workspace    workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  @@id([user_id, workspace_id])
  @@index([user_id])
  @@index([workspace_id])
  @@index([role_id])
}

model role {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           Role
  description    String
  permissions    Permission[]     @default([])
  user_team      user_team[]
  user_workspace user_workspace[]
}

// work plan templates
model work_plan_template {
  id          String   @id @default(dbgenerated("nanoid(10)"))
  public_id   String   @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  description String?
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  team_id String
  team    team   @relation(fields: [team_id], references: [id], onDelete: Cascade)

  work_step_template work_step_template[]
  work_plan          work_plan[]

  @@unique([public_id])
  @@index([team_id])
}

model work_step_template {
  id             String   @id @default(dbgenerated("nanoid(17)"))
  public_id      String   @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String
  description    String?
  created_at     DateTime @default(now()) @db.Timestamptz(6)
  updated_at     DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  parent_step_id String?
  created_by_id  String?  @db.Uuid
  step_order     Int?

  work_plan_id       String
  work_plan_template work_plan_template @relation(fields: [work_plan_id], references: [id], onDelete: Cascade)

  parent_step work_step_template?  @relation("step_sub_steps", fields: [parent_step_id], references: [id], onDelete: Cascade)
  sub_steps   work_step_template[] @relation("step_sub_steps")

  @@unique([public_id])
  @@index([parent_step_id])
  @@index([created_by_id])
  @@index([work_plan_id])
}

// work plan
model work_plan {
  id          String   @id @default(dbgenerated("nanoid(10)"))
  public_id   String   @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  description String?
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  work_plan_template_id String?
  work_plan_template    work_plan_template? @relation(fields: [work_plan_template_id], references: [id])

  team_id String
  team    team   @relation(fields: [team_id], references: [id], onDelete: Cascade)

  work_order work_order[]
  work_step  work_step[]

  @@unique([work_plan_template_id, created_at])
  @@unique([public_id])
  @@index([work_plan_template_id])
}

model work_step {
  id             String   @id @default(dbgenerated("nanoid(17)"))
  public_id      String   @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String
  description    String?
  created_at     DateTime @default(now()) @db.Timestamptz(6)
  updated_at     DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  parent_step_id String?
  created_by_id  String?  @db.Uuid
  step_order     Int?

  work_plan_id String
  work_plan    work_plan @relation(fields: [work_plan_id], references: [id], onDelete: Cascade)

  parent_step      work_step?         @relation("step_sub_steps", fields: [parent_step_id], references: [id], onDelete: Cascade)
  sub_steps        work_step[]        @relation("step_sub_steps")
  work_step_status work_step_status[]

  @@unique([public_id])
  @@index([parent_step_id])
  @@index([created_by_id])
  @@index([work_plan_id])
}

//work orders
model work_order {
  id          String   @id @default(dbgenerated("nanoid(10)"))
  public_id   String   @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  description String?
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  status      Status   @default(OPEN)

  team_id String
  team    team   @relation(fields: [team_id], references: [id], onDelete: Cascade)

  work_plan_id String?
  work_plan    work_plan? @relation(fields: [work_plan_id], references: [id])

  work_step_status work_step_status[]

  @@unique([public_id])
  @@index([team_id])
}

model work_step_status {
  id         String   @id @default(dbgenerated("nanoid(17)"))
  public_id  String   @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  status     Status   @default(OPEN)
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  work_order_id String
  work_order    work_order @relation(fields: [work_order_id], references: [id], onDelete: Cascade)

  work_step_id String?
  work_step    work_step? @relation(fields: [work_step_id], references: [id])

  @@unique([public_id])
  @@index([work_order_id])
}

enum Status {
  OPEN
  IN_PROGRESS
  COMPLETED
  ON_HOLD
  CANCELED
}

enum Role {
  ADMIN
  MANAGER
  SUPERVISOR
  TECHNICIAN
  ENGINEER
  QUALITY_INSPECTOR
  OPERATOR
  OTHER
}

enum Permission {
  FULL_ACCESS
  CAN_EDIT
  CAN_COMMENT
  CAN_VIEW
  NO_ACCESS
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum inspectionType {
  INSPECTION
  MAINTENANCE
  OTHER
}
