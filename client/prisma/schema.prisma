generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model user {
  id                 String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  image_uri          String?
  email              String           @unique
  first_name         String?
  last_name          String?
  createdAt          DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime         @default(now()) @updatedAt @db.Timestamptz(6)
  external_id        String?          @unique @db.Uuid
  tasks              task[]
  user_project_roles user_project[]
  user_team_roles    user_team[]
  user_workspace     user_workspace[]
  workspaces         workspace[]
}

model team {
  id          String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String
  description String?
  image_uri   String?

  url_key String

  created_at   DateTime    @default(now()) @db.Timestamptz(6)
  updated_at   DateTime    @default(now()) @updatedAt @db.Timestamptz(6)
  workspace_id String      @db.Uuid
  projects     project[]
  workspace    workspace   @relation(fields: [workspace_id], references: [id], onDelete: Cascade)
  users        user_team[]

  @@unique([url_key, id])
}

model role {
  id                 String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name               String           @unique
  description        String
  permissions        String[]
  user_project_roles user_project[]
  user_team_roles    user_team[]
  user_workspace     user_workspace[]
}

model project {
  id                String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name              String
  description       String?
  created_at        DateTime       @default(now()) @db.Timestamptz(6)
  updated_at        DateTime       @default(now()) @updatedAt @db.Timestamptz(6)
  team_id           String         @db.Uuid
  team              team           @relation(fields: [team_id], references: [id], onDelete: Cascade)
  tasks             task[]
  user_project_role user_project[]

  @@index([team_id])
}

model task {
  id             String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name           String
  description    String?
  status         status
  created_at     DateTime @default(now()) @db.Timestamptz(6)
  updated_at     DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  project_id     String   @db.Uuid
  parent_task_id String?  @db.Uuid
  created_by_id  String?  @db.Uuid
  created_by     user?    @relation(fields: [created_by_id], references: [id])
  parent_task    task?    @relation("task_sub_tasks", fields: [parent_task_id], references: [id], onDelete: Cascade)
  sub_tasks      task[]   @relation("task_sub_tasks")
  project        project  @relation(fields: [project_id], references: [id], onDelete: Cascade)

  @@index([project_id])
  @@index([parent_task_id])
  @@index([created_by_id])
}

model user_team {
  user_id String  @db.Uuid
  team_id String  @db.Uuid
  role_id String? @db.Uuid
  // role    role   @relation(fields: [role_id], references: [id])
  team    team    @relation(fields: [team_id], references: [id])
  user    user    @relation(fields: [user_id], references: [id])
  role    role?   @relation(fields: [roleId], references: [id])
  roleId  String? @db.Uuid

  @@id([user_id, team_id])
  @@index([team_id])
  @@index([role_id])
  @@index([user_id])
}

model user_project {
  user_id    String  @db.Uuid
  project_id String  @db.Uuid
  role_id    String  @db.Uuid
  project    project @relation(fields: [project_id], references: [id])
  role       role    @relation(fields: [role_id], references: [id])
  user       user    @relation(fields: [user_id], references: [id])

  @@id([user_id, project_id, role_id])
  @@index([user_id])
  @@index([project_id])
  @@index([role_id])
}

model user_workspace {
  user_id      String    @db.Uuid
  workspace_id String    @db.Uuid
  role_id      String?   @db.Uuid
  role         role?     @relation(fields: [role_id], references: [id])
  user         user      @relation(fields: [user_id], references: [id])
  workspace    workspace @relation(fields: [workspace_id], references: [id])

  @@id([user_id, workspace_id])
  @@index([user_id])
  @@index([workspace_id])
  @@index([role_id])
}

model workspace {
  id             String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name           String
  description    String?
  created_at     DateTime         @default(now()) @db.Timestamptz(6)
  updated_at     DateTime         @default(now()) @updatedAt @db.Timestamptz(6)
  url_key        String           @unique
  created_by     String           @db.Uuid
  team           team[]
  user_workspace user_workspace[]
  user           user             @relation(fields: [created_by], references: [id])

  @@index([url_key])
}

enum status {
  NOTSTARTED
  INPROGRESS
  COMPLETED_SUCCESS
  COMPLETED_FAIL
}

enum Role {
  ADMIN
  MANAGER
  SUPERVISOR
  TECHNICIAN
  ENGINEER
  QUALITY_INSPECTOR
  OPERATOR
  OTHER
}
