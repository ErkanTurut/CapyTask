// Generated by ts-to-zod
import { z } from "zod";
import { Json } from "./types/supabase.types";

export const jsonSchema: z.ZodSchema<Json> = z.lazy(() =>
  z
    .union([
      z.string(),
      z.number(),
      z.boolean(),
      z.record(z.union([jsonSchema, z.undefined()])),
      z.array(jsonSchema),
    ])
    .nullable(),
);

export const prismaMigrationsRowSchema = z.object({
  applied_steps_count: z.number(),
  checksum: z.string(),
  finished_at: z.string().nullable(),
  id: z.string(),
  logs: z.string().nullable(),
  migration_name: z.string(),
  rolled_back_at: z.string().nullable(),
  started_at: z.string(),
});

export const prismaMigrationsInsertSchema = z.object({
  applied_steps_count: z.number().optional(),
  checksum: z.string(),
  finished_at: z.string().optional().nullable(),
  id: z.string(),
  logs: z.string().optional().nullable(),
  migration_name: z.string(),
  rolled_back_at: z.string().optional().nullable(),
  started_at: z.string().optional(),
});

export const prismaMigrationsUpdateSchema = z.object({
  applied_steps_count: z.number().optional(),
  checksum: z.string().optional(),
  finished_at: z.string().optional().nullable(),
  id: z.string().optional(),
  logs: z.string().optional().nullable(),
  migration_name: z.string().optional(),
  rolled_back_at: z.string().optional().nullable(),
  started_at: z.string().optional(),
});

export const prismaMigrationsRelationshipsSchema = z.tuple([]);

export const addressRowSchema = z.object({
  city: z.string(),
  country: z.string(),
  createdDate: z.string(),
  geography: z.unknown(),
  id: z.string(),
  postal_code: z.string(),
  public_id: z.string(),
  state: z.string(),
  street: z.string(),
});

export const addressInsertSchema = z.object({
  city: z.string(),
  country: z.string(),
  createdDate: z.string().optional(),
  geography: z.unknown(),
  id: z.string().optional(),
  postal_code: z.string(),
  public_id: z.string().optional(),
  state: z.string(),
  street: z.string(),
});

export const addressUpdateSchema = z.object({
  city: z.string().optional(),
  country: z.string().optional(),
  createdDate: z.string().optional(),
  geography: z.unknown().optional(),
  id: z.string().optional(),
  postal_code: z.string().optional(),
  public_id: z.string().optional(),
  state: z.string().optional(),
  street: z.string().optional(),
});

export const addressRelationshipsSchema = z.tuple([]);

export const assetRowSchema = z.object({
  created_at: z.string(),
  description: z.string().nullable(),
  id: z.string(),
  location_id: z.string().nullable(),
  name: z.string(),
  public_id: z.string(),
  updated_at: z.string(),
  workspace_id: z.string(),
});

export const assetInsertSchema = z.object({
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  location_id: z.string().optional().nullable(),
  name: z.string(),
  public_id: z.string().optional(),
  updated_at: z.string().optional(),
  workspace_id: z.string(),
});

export const assetUpdateSchema = z.object({
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  location_id: z.string().optional().nullable(),
  name: z.string().optional(),
  public_id: z.string().optional(),
  updated_at: z.string().optional(),
  workspace_id: z.string().optional(),
});

export const assetRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("asset_location_id_fkey"),
    columns: z.tuple([z.literal("location_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("location"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("asset_workspace_id_fkey"),
    columns: z.tuple([z.literal("workspace_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("workspace"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const companyRowSchema = z.object({
  created_at: z.string(),
  description: z.string().nullable(),
  id: z.string(),
  name: z.string(),
  public_id: z.string(),
  updated_at: z.string(),
  workspace_id: z.string(),
});

export const companyInsertSchema = z.object({
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  name: z.string(),
  public_id: z.string().optional(),
  updated_at: z.string().optional(),
  workspace_id: z.string(),
});

export const companyUpdateSchema = z.object({
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  name: z.string().optional(),
  public_id: z.string().optional(),
  updated_at: z.string().optional(),
  workspace_id: z.string().optional(),
});

export const companyRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("company_workspace_id_fkey"),
    columns: z.tuple([z.literal("workspace_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("workspace"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const companyUserRowSchema = z.object({
  company_id: z.string(),
  user_id: z.string(),
});

export const companyUserInsertSchema = z.object({
  company_id: z.string(),
  user_id: z.string(),
});

export const companyUserUpdateSchema = z.object({
  company_id: z.string().optional(),
  user_id: z.string().optional(),
});

export const companyUserRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("company_user_company_id_fkey"),
    columns: z.tuple([z.literal("company_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("company"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("company_user_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("user"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const locationTypeSchema = z.union([
  z.literal("BUILDING"),
  z.literal("FLOOR"),
  z.literal("ROOM"),
  z.literal("AREA"),
  z.literal("OTHER"),
]);

export const locationInsertSchema = z.object({
  address_id: z.string(),
  company_id: z.string().optional().nullable(),
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  location_level: z.number().optional(),
  location_type: locationTypeSchema.optional(),
  name: z.string(),
  parent_location_id: z.string().optional().nullable(),
  public_id: z.string().optional(),
  updated_at: z.string().optional(),
  workspace_id: z.string(),
});

export const locationUpdateSchema = z.object({
  address_id: z.string().optional(),
  company_id: z.string().optional().nullable(),
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  location_level: z.number().optional(),
  location_type: locationTypeSchema.optional(),
  name: z.string().optional(),
  parent_location_id: z.string().optional().nullable(),
  public_id: z.string().optional(),
  updated_at: z.string().optional(),
  workspace_id: z.string().optional(),
});

export const locationRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("location_address_id_fkey"),
    columns: z.tuple([z.literal("address_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("address"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("location_company_id_fkey"),
    columns: z.tuple([z.literal("company_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("company"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("location_parent_location_id_fkey"),
    columns: z.tuple([z.literal("parent_location_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("location"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("location_workspace_id_fkey"),
    columns: z.tuple([z.literal("workspace_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("workspace"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const permissionSchema = z.union([
  z.literal("CREATE"),
  z.literal("READ"),
  z.literal("UPDATE"),
  z.literal("DELETE"),
]);

export const roleSchema = z.union([
  z.literal("ADMIN"),
  z.literal("MANAGER"),
  z.literal("SUPERVISOR"),
  z.literal("TECHNICIAN"),
  z.literal("ENGINEER"),
  z.literal("QUALITY_INSPECTOR"),
  z.literal("OPERATOR"),
  z.literal("OTHER"),
]);

export const rolePermissionInsertSchema = z.object({
  id: z.string().optional(),
  permission: permissionSchema,
  role: roleSchema,
});

export const rolePermissionUpdateSchema = z.object({
  id: z.string().optional(),
  permission: permissionSchema.optional(),
  role: roleSchema.optional(),
});

export const rolePermissionRelationshipsSchema = z.tuple([]);

export const teamRowSchema = z.object({
  created_at: z.string(),
  description: z.string().nullable(),
  id: z.string(),
  identity: z.string(),
  image_uri: z.string().nullable(),
  name: z.string(),
  public_id: z.string(),
  updated_at: z.string(),
  workspace_id: z.string(),
});

export const teamInsertSchema = z.object({
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  identity: z.string(),
  image_uri: z.string().optional().nullable(),
  name: z.string(),
  public_id: z.string().optional(),
  updated_at: z.string().optional(),
  workspace_id: z.string(),
});

export const teamUpdateSchema = z.object({
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  identity: z.string().optional(),
  image_uri: z.string().optional().nullable(),
  name: z.string().optional(),
  public_id: z.string().optional(),
  updated_at: z.string().optional(),
  workspace_id: z.string().optional(),
});

export const teamRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("team_workspace_id_fkey"),
    columns: z.tuple([z.literal("workspace_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("workspace"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const teamUserRowSchema = z.object({
  role: roleSchema,
  team_id: z.string(),
  user_id: z.string(),
});

export const teamUserInsertSchema = z.object({
  role: roleSchema,
  team_id: z.string(),
  user_id: z.string(),
});

export const teamUserUpdateSchema = z.object({
  role: roleSchema.optional(),
  team_id: z.string().optional(),
  user_id: z.string().optional(),
});

export const teamUserRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("team_user_team_id_fkey"),
    columns: z.tuple([z.literal("team_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("team"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("team_user_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("user"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const userRowSchema = z.object({
  createdAt: z.string(),
  email: z.string(),
  external_id: z.string().nullable(),
  first_name: z.string().nullable(),
  id: z.string(),
  image_uri: z.string().nullable(),
  last_name: z.string().nullable(),
  updatedAt: z.string(),
});

export const userInsertSchema = z.object({
  createdAt: z.string().optional(),
  email: z.string(),
  external_id: z.string().optional().nullable(),
  first_name: z.string().optional().nullable(),
  id: z.string().optional(),
  image_uri: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  updatedAt: z.string().optional(),
});

export const userUpdateSchema = z.object({
  createdAt: z.string().optional(),
  email: z.string().optional(),
  external_id: z.string().optional().nullable(),
  first_name: z.string().optional().nullable(),
  id: z.string().optional(),
  image_uri: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  updatedAt: z.string().optional(),
});

export const userRelationshipsSchema = z.tuple([]);

export const prioritySchema = z.union([
  z.literal("LOW"),
  z.literal("MEDIUM"),
  z.literal("HIGH"),
]);

export const workOrderSourceSchema = z.union([
  z.literal("MAINTENANCE_PLAN"),
  z.literal("AI_CHAT"),
  z.literal("AI_VOICE_ASSISTANT"),
  z.literal("MANUAL_ENTRY"),
  z.literal("OTHER"),
]);

export const statusSchema = z.union([
  z.literal("OPEN"),
  z.literal("IN_PROGRESS"),
  z.literal("COMPLETED"),
  z.literal("ON_HOLD"),
  z.literal("CANCELED"),
]);

export const workOrderTypeSchema = z.union([
  z.literal("INSPECTION"),
  z.literal("MAINTENANCE"),
  z.literal("OTHER"),
]);

export const workOrderInsertSchema = z.object({
  company_id: z.string(),
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  location_id: z.string().optional().nullable(),
  name: z.string(),
  priority: prioritySchema.optional(),
  public_id: z.string().optional(),
  requested_by_id: z.string().optional().nullable(),
  sheduled_end: z.string().optional().nullable(),
  sheduled_start: z.string().optional().nullable(),
  source: workOrderSourceSchema,
  status: statusSchema.optional(),
  team_id: z.string(),
  type: workOrderTypeSchema.optional(),
  updated_at: z.string().optional(),
  work_plan_id: z.string().optional().nullable(),
  workspace_id: z.string(),
});

export const workOrderUpdateSchema = z.object({
  company_id: z.string().optional(),
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  location_id: z.string().optional().nullable(),
  name: z.string().optional(),
  priority: prioritySchema.optional(),
  public_id: z.string().optional(),
  requested_by_id: z.string().optional().nullable(),
  sheduled_end: z.string().optional().nullable(),
  sheduled_start: z.string().optional().nullable(),
  source: workOrderSourceSchema.optional(),
  status: statusSchema.optional(),
  team_id: z.string().optional(),
  type: workOrderTypeSchema.optional(),
  updated_at: z.string().optional(),
  work_plan_id: z.string().optional().nullable(),
  workspace_id: z.string().optional(),
});

export const workOrderRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("work_order_company_id_fkey"),
    columns: z.tuple([z.literal("company_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("company"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("work_order_location_id_fkey"),
    columns: z.tuple([z.literal("location_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("location"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("work_order_requested_by_id_fkey"),
    columns: z.tuple([z.literal("requested_by_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("user"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("work_order_team_id_fkey"),
    columns: z.tuple([z.literal("team_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("team"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("work_order_work_plan_id_fkey"),
    columns: z.tuple([z.literal("work_plan_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("work_plan"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("work_order_workspace_id_fkey"),
    columns: z.tuple([z.literal("workspace_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("workspace"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const workOrderAssetRowSchema = z.object({
  asset_id: z.string(),
  status: statusSchema,
  work_order_id: z.string(),
});

export const workOrderAssetInsertSchema = z.object({
  asset_id: z.string(),
  status: statusSchema.optional(),
  work_order_id: z.string(),
});

export const workOrderAssetUpdateSchema = z.object({
  asset_id: z.string().optional(),
  status: statusSchema.optional(),
  work_order_id: z.string().optional(),
});

export const workOrderAssetRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("work_order_asset_asset_id_fkey"),
    columns: z.tuple([z.literal("asset_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("asset"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("work_order_asset_work_order_id_fkey"),
    columns: z.tuple([z.literal("work_order_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("work_order"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const workPlanRowSchema = z.object({
  created_at: z.string(),
  description: z.string().nullable(),
  id: z.string(),
  name: z.string(),
  public_id: z.string(),
  team_id: z.string(),
  updated_at: z.string(),
  work_plan_template_id: z.string().nullable(),
});

export const workPlanInsertSchema = z.object({
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  name: z.string(),
  public_id: z.string().optional(),
  team_id: z.string(),
  updated_at: z.string().optional(),
  work_plan_template_id: z.string().optional().nullable(),
});

export const workPlanUpdateSchema = z.object({
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  name: z.string().optional(),
  public_id: z.string().optional(),
  team_id: z.string().optional(),
  updated_at: z.string().optional(),
  work_plan_template_id: z.string().optional().nullable(),
});

export const workPlanRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("work_plan_team_id_fkey"),
    columns: z.tuple([z.literal("team_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("team"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("work_plan_work_plan_template_id_fkey"),
    columns: z.tuple([z.literal("work_plan_template_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("work_plan_template"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const workPlanTemplateRowSchema = z.object({
  created_at: z.string(),
  description: z.string().nullable(),
  id: z.string(),
  name: z.string(),
  public_id: z.string(),
  updated_at: z.string(),
  workspace_id: z.string(),
});

export const workPlanTemplateInsertSchema = z.object({
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  name: z.string(),
  public_id: z.string().optional(),
  updated_at: z.string().optional(),
  workspace_id: z.string(),
});

export const workPlanTemplateUpdateSchema = z.object({
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  name: z.string().optional(),
  public_id: z.string().optional(),
  updated_at: z.string().optional(),
  workspace_id: z.string().optional(),
});

export const workPlanTemplateRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("work_plan_template_workspace_id_fkey"),
    columns: z.tuple([z.literal("workspace_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("workspace"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const workStepRowSchema = z.object({
  asset_id: z.string().nullable(),
  created_at: z.string(),
  created_by_id: z.string().nullable(),
  description: z.string().nullable(),
  id: z.string(),
  name: z.string(),
  parent_step_id: z.string().nullable(),
  public_id: z.string(),
  status: statusSchema,
  step_order: z.number().nullable(),
  updated_at: z.string(),
  work_order_id: z.string(),
  work_plan_id: z.string(),
  work_step_template_id: z.string().nullable(),
});

export const workStepInsertSchema = z.object({
  asset_id: z.string().optional().nullable(),
  created_at: z.string().optional(),
  created_by_id: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  name: z.string(),
  parent_step_id: z.string().optional().nullable(),
  public_id: z.string().optional(),
  status: statusSchema.optional(),
  step_order: z.number().optional().nullable(),
  updated_at: z.string().optional(),
  work_order_id: z.string(),
  work_plan_id: z.string(),
  work_step_template_id: z.string().optional().nullable(),
});

export const workStepUpdateSchema = z.object({
  asset_id: z.string().optional().nullable(),
  created_at: z.string().optional(),
  created_by_id: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  name: z.string().optional(),
  parent_step_id: z.string().optional().nullable(),
  public_id: z.string().optional(),
  status: statusSchema.optional(),
  step_order: z.number().optional().nullable(),
  updated_at: z.string().optional(),
  work_order_id: z.string().optional(),
  work_plan_id: z.string().optional(),
  work_step_template_id: z.string().optional().nullable(),
});

export const workStepRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("work_step_asset_id_fkey"),
    columns: z.tuple([z.literal("asset_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("asset"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("work_step_parent_step_id_fkey"),
    columns: z.tuple([z.literal("parent_step_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("work_step"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("work_step_work_order_id_fkey"),
    columns: z.tuple([z.literal("work_order_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("work_order"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("work_step_work_plan_id_fkey"),
    columns: z.tuple([z.literal("work_plan_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("work_plan"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("work_step_work_step_template_id_fkey"),
    columns: z.tuple([z.literal("work_step_template_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("work_step_template"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const workStepTemplateRowSchema = z.object({
  created_at: z.string(),
  created_by_id: z.string().nullable(),
  description: z.string().nullable(),
  id: z.string(),
  name: z.string(),
  parent_step_id: z.string().nullable(),
  public_id: z.string(),
  step_order: z.number().nullable(),
  updated_at: z.string(),
  work_plan_template_id: z.string(),
});

export const workStepTemplateInsertSchema = z.object({
  created_at: z.string().optional(),
  created_by_id: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  name: z.string(),
  parent_step_id: z.string().optional().nullable(),
  public_id: z.string().optional(),
  step_order: z.number().optional().nullable(),
  updated_at: z.string().optional(),
  work_plan_template_id: z.string(),
});

export const workStepTemplateUpdateSchema = z.object({
  created_at: z.string().optional(),
  created_by_id: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  name: z.string().optional(),
  parent_step_id: z.string().optional().nullable(),
  public_id: z.string().optional(),
  step_order: z.number().optional().nullable(),
  updated_at: z.string().optional(),
  work_plan_template_id: z.string().optional(),
});

export const workStepTemplateRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("work_step_template_parent_step_id_fkey"),
    columns: z.tuple([z.literal("parent_step_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("work_step_template"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("work_step_template_work_plan_template_id_fkey"),
    columns: z.tuple([z.literal("work_plan_template_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("work_plan_template"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const workspaceRowSchema = z.object({
  created_at: z.string(),
  created_by: z.string(),
  description: z.string().nullable(),
  id: z.string(),
  image_uri: z.string().nullable(),
  name: z.string(),
  public_id: z.string(),
  updated_at: z.string(),
  url_key: z.string(),
});

export const workspaceInsertSchema = z.object({
  created_at: z.string().optional(),
  created_by: z.string(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  image_uri: z.string().optional().nullable(),
  name: z.string(),
  public_id: z.string().optional(),
  updated_at: z.string().optional(),
  url_key: z.string(),
});

export const workspaceUpdateSchema = z.object({
  created_at: z.string().optional(),
  created_by: z.string().optional(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  image_uri: z.string().optional().nullable(),
  name: z.string().optional(),
  public_id: z.string().optional(),
  updated_at: z.string().optional(),
  url_key: z.string().optional(),
});

export const workspaceRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("workspace_created_by_fkey"),
    columns: z.tuple([z.literal("created_by")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("user"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const workspaceUserRowSchema = z.object({
  role: roleSchema,
  user_id: z.string(),
  workspace_id: z.string(),
});

export const workspaceUserInsertSchema = z.object({
  role: roleSchema,
  user_id: z.string(),
  workspace_id: z.string(),
});

export const workspaceUserUpdateSchema = z.object({
  role: roleSchema.optional(),
  user_id: z.string().optional(),
  workspace_id: z.string().optional(),
});

export const workspaceUserRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("workspace_user_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("user"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("workspace_user_workspace_id_fkey"),
    columns: z.tuple([z.literal("workspace_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("workspace"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const locationRowSchema = z.object({
  address_id: z.string(),
  company_id: z.string().nullable(),
  created_at: z.string(),
  description: z.string().nullable(),
  id: z.string(),
  location_level: z.number(),
  location_type: locationTypeSchema,
  name: z.string(),
  parent_location_id: z.string().nullable(),
  public_id: z.string(),
  updated_at: z.string(),
  workspace_id: z.string(),
});

export const rolePermissionRowSchema = z.object({
  id: z.string(),
  permission: permissionSchema,
  role: roleSchema,
});

export const workOrderRowSchema = z.object({
  company_id: z.string(),
  created_at: z.string(),
  description: z.string().nullable(),
  id: z.string(),
  location_id: z.string().nullable(),
  name: z.string(),
  priority: prioritySchema,
  public_id: z.string(),
  requested_by_id: z.string().nullable(),
  sheduled_end: z.string().nullable(),
  sheduled_start: z.string().nullable(),
  source: workOrderSourceSchema,
  status: statusSchema,
  team_id: z.string(),
  type: workOrderTypeSchema,
  updated_at: z.string(),
  work_plan_id: z.string().nullable(),
  workspace_id: z.string(),
});
